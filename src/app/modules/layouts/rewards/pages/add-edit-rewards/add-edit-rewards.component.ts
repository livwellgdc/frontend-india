import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';
import { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';
import { LIMIT, REGEX } from './../../../../../constants/validator';
import { REWARD_TYPE, REWARD_ERROR_MESSAGES, INVALID_DATE_TIME_ERROR, COUPON_CODE_TYPE, VALID_CSV_FILE_SIZE, SELECT_VALID_FILE, SOMETHING_WRONG, VALID_CSV_FILE_HEADER, REWARD_PRIVACY } from '../../../../../constants/messages';
import { Pagination } from '../../../../../constants/paginator';
import { UploadPopupComponent } from '../../../../../components/cropper/upload-popup/upload-popup.component';
import { MatDialog } from '@angular/material';
import { CommonService } from '../../../../../services/common/common.service';
import { S3BucketService } from '../../../../../services/s3-bucket/s3-bucket.service';
import { RewardsService } from '../../_service/rewards.service';
import { REWARDS } from '../../../../../constants/routes';
import { ToastService } from '../../../../../components/toast-notification/toast.service';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { BreadcrumbService } from '../../../../../components/breadcrumb/breadcrumb.service';
import { BC_REWARDS_EDIT, BC_REWARDS_ADD } from '../../../../../constants/breadcrumb-routes';
import { dateToMs, splitAt, generateRandomCombination, autoGenerateCode, removeDuplicates } from '../../../../../constants/helper';
import { ShowCouponCodesComponent } from '../../../../../components/show-coupon-codes/show-coupon-codes.component';

@Component({
  selector: 'lv-add-edit-rewards',
  templateUrl: './add-edit-rewards.component.html',
  styleUrls: ['./add-edit-rewards.component.scss'],
  providers: [S3BucketService, RewardsService]
})
export class AddEditRewardsComponent extends Pagination implements OnInit {
  rewardForm: FormGroup;
  cropFile: any;
  _limit = LIMIT;
  errMsg = { ...REWARD_ERROR_MESSAGES, ...INVALID_DATE_TIME_ERROR };
  rewardId: string;
  rewardType = REWARD_TYPE;
  codeType = COUPON_CODE_TYPE;
  rewardDetails: Reward.RewardData;
  livwellBenefitList = [];
  codesArray = {
    autoGeneratedCodes: [],
    manuallyGeneratedCodes: [],
    fileName: ''
  }
  rewardPricay = REWARD_PRIVACY;
  @ViewChild('csvReader', null) csvReader: ElementRef;

  constructor(
    private _fb: FormBuilder,
    private _bc: BreadcrumbService,
    private _dialog: MatDialog,
    private _common: CommonService,
    private _reward: RewardsService,
    private _s3: S3BucketService,
    private _toast: ToastService,
    private _router: Router,
    private _actRoute: ActivatedRoute,
    private _loc: Location
  ) { super() }

  ngOnInit() {
    this.rewardId = this._actRoute.snapshot.params['rewardId'];
    this.createForm();
    if (this.rewardId) {
      this._bc.setBreadcrumb(BC_REWARDS_EDIT);
      if (this._common.isValidId(this.rewardId)) {
        this.getRewardDetails();
      }
    } else {
      this.getLivWellBenefits();
      this._bc.setBreadcrumb(BC_REWARDS_ADD);
    }
  }

  createForm() {
    this.rewardForm = this._fb.group({
      name: this._fb.group({
        en: [''],
        vi: ['']
      }),
      description: this._fb.group({
        en: [''],
        vi: ['']
      }),
      instruction: this._fb.group({
        en: [''],
        vi: ['']
      }),
      validity: [],
      notes: this._fb.group({
        en: [''],
        vi: ['']
      }),
      image: [''],
      points: [],
      privacy: [this.rewardPricay[0].value],
      redemptionValidity: [, [Validators.pattern(REGEX.AMOUNT)]],
      totalRedemption: [0, [Validators.pattern(REGEX.AMOUNT)]],
      discountPercent: [, [Validators.max(this._limit.MAX_DISCOUNT_VALUE), Validators.pattern(REGEX.AMOUNT)]],
      totalPoints: [, [Validators.pattern(REGEX.AMOUNT)]],
      couponCodeType: [this.codeType[0].value],
      couponCode: [''],
      categoryId: this._fb.group({
        _id: [''],
        name: this._fb.group({
          en: [''],
          vi: ['']
        }),
        description: [''],
        instruction: [''],
        image: [''],
        status: [''],
        accessType: [''],
        created: []
      }),
      type: [''],
      colorCode:[],
      sponsorLink: ['', [Validators.pattern(REGEX.URL)]],
      sponsorName: [''],
      isFeatured: [false],
      hasScanner: [false],
      hasLocationCheck: [false],
      hasExternalLink: [false],
      hasExternalLinkWithCode: [false]
    })
  }

  get f() { return this.rewardForm.controls } // return form controls

  getRewardDetails() {
    this._reward.getRewardDetail({ rewardId: this.rewardId, rewardType: 'CUSTOM_REWARD' }).subscribe((res: Reward.RewardDetail) => {
      if (res.statusCode == 200) {
        this.rewardDetails = res.data;
        if (this.rewardDetails.isDisabled) {
          this.livwellBenefitList = [this.rewardDetails.categoryId];
        } else {
          this.getLivWellBenefits();
        }
        this.cropFile = {
          cropBase64: this.rewardDetails.image,
          cropFile: this.rewardDetails.image
        }
        this.onChangeCodeType(this.rewardDetails.couponCodeType);
        this.rewardForm.patchValue(this.rewardDetails);
        this.f.image.setValue(this.rewardDetails.image);
        this.f.validity.setValue(new Date(this.rewardDetails.validity));

        if (this.rewardDetails.hasExternalLink) {
          this.onExternalCheck(true);
        } else {
          if (this.rewardDetails.couponCodeType == this.codeType[0].value) {
            this.codesArray.autoGeneratedCodes = this.rewardDetails.couponCodes;
            this.f.couponCode.setValue(this.rewardDetails.couponCodes[0]);
          } else {
            this.codesArray.manuallyGeneratedCodes = this.rewardDetails.couponCodes;
          }
        }
      }
    }, (error) => {
      if (error.statusCode == 400) {
        this._toast.error(error.message);
        this._router.navigate([REWARDS]);
      }
    })
  }

  getLivWellBenefits() {
    let queryObj = {
      pageNo: 1,
      limit: 100,
      categoryType: this.API_EVENT.livwellBenifit,
      status: this.API_EVENT.active
    }
    this._common.getCategories(queryObj).subscribe(res => {
      if (res.statusCode === 200) {
        this.livwellBenefitList = res.data;
      }
    })
  }

  downloadSampleCsv() {
    this._common.downloadInCsvFormat(['ABCD1234'], ['Code'], true, 'sample_code');
  }

  public onExternalCheck(checked: boolean): void {
    if(checked) {
      this.rewardForm.removeControl('totalRedemption');
      this.f.hasExternalLinkWithCode.setValue(false);
    } else {
      this.rewardForm.addControl('totalRedemption', new FormControl());
    }
  }

  public onExternalWithCodeCheck(checked: boolean): void {
    this.rewardForm.addControl('totalRedemption', new FormControl());
    this.f.hasExternalLink.setValue(false);
  }

  fileChange($event: any) {
    if (this.rewardId && this.rewardDetails.isDisabled) {
      // this._toast.error(NOT_UPDATED);
    } else {
      let files = $event.srcElement.files;
      this.codesArray.fileName = files[0].name;

      if (this._common.isValidCSVFile(files[0])) {

        if (files[0].size > 5000000) {
          this._toast.info(VALID_CSV_FILE_SIZE);
          this.resetSelectedFile();
          return;
        }

        let input = $event.target;
        let reader = new FileReader();
        reader.readAsText(input.files[0]);

        reader.onload = () => {
          let csvData = reader.result;
          let csvRecordsArray = (<string>csvData).split(/\r\n|\n/);

          let headersRow = this._common.getHeaderArray(csvRecordsArray);
          if (headersRow[0] !== 'S.No.' || headersRow[1] !== 'Code') {
            this._toast.error(VALID_CSV_FILE_HEADER);
            this.resetSelectedFile();
            return;
          }

          this.codesArray.manuallyGeneratedCodes = removeDuplicates(this._common.getDataRecordsArrayFromCSVFile(csvRecordsArray));

          if (!this.codesArray.manuallyGeneratedCodes.length) {
            this._toast.error(this.errMsg.MIN_MANUAL_CODE);
            this.resetSelectedFile();
            return
          }
        };

        reader.onerror = () => {
          this._toast.error(SOMETHING_WRONG);
          this.resetSelectedFile();
        };

      } else {
        this._toast.error(SELECT_VALID_FILE);
        this.resetSelectedFile();
      }
    }
  }

  resetSelectedFile() {
    if (this.csvReader && this.csvReader.nativeElement) {
      this.csvReader.nativeElement.value = "";
    }
    this.codesArray.fileName = '';
    this.codesArray.manuallyGeneratedCodes = [];
  }

  showCouponCode(value?) {
    if (this.rewardId && this.rewardDetails.isDisabled) {
      // this._toast.error(NOT_UPDATED);
    } else {
      if (this.f.couponCode.value && this.f.totalRedemption.value) {
        this.codesArray.autoGeneratedCodes = autoGenerateCode(this.f.couponCode.value, this.f.totalRedemption.value);
        this.rewardForm.value['couponCodes'] = this.codesArray.autoGeneratedCodes;
        if (value == 1) {
          this.openCodeDialog(this.codesArray.autoGeneratedCodes);
        }
      }
    }
  }

  openCodeDialog(arrayOfCode) {
    if (arrayOfCode.length > 0) {
      this._dialog.open(ShowCouponCodesComponent, {
        data: {
          couponCodeArray: arrayOfCode
        }
      });
    }
  }

  livwellBenefitSelectionHandler(categoryId: string) {
    for (let find = 0; find < this.livwellBenefitList.length; find++) {
      if (categoryId == this.livwellBenefitList[find]._id) {
        this.f.categoryId.patchValue(this.livwellBenefitList[find]);
        break;
      }
    }
    this.autoGenerateCouponCode();
  }

  autoGenerateCouponCode() {
    if (this.rewardId && this.rewardDetails.isDisabled) {
      // this._toast.error(NOT_UPDATED);
    } else {
      if (this.f.couponCodeType.value == this.codeType[0].value && this.f.totalRedemption && this.f.totalRedemption.value) {
        if (this.f.sponsorName.value && this.f.sponsorName.valid && this.f['categoryId']['controls'].name.value.en) {
          let sponsorName = splitAt(3)((this.f.sponsorName.value).toString().split(' ').join(''))[0].toUpperCase();

          let categoryName: any;
          let categoryNameLength = (this.f['categoryId']['controls'].name.value.en).toString().split(' ').length;

          if (categoryNameLength >= 3) {
            categoryName = splitAt(1)((this.f['categoryId']['controls'].name.value.en).toString().split(' ')[categoryNameLength - 1])[0].toUpperCase();
          } else {
            categoryName = splitAt(1)((this.f['categoryId']['controls'].name.value.en).toString().split(' ').join(''))[0].toUpperCase();
          }

          this.f.couponCode.setValue(`${categoryName}${sponsorName}${generateRandomCombination()}`);
          this.showCouponCode();
        }
      }
    }
  }

  onSelectFile() {
    const dialogRef = this._dialog.open(UploadPopupComponent, {
      width: '1150px',
      panelClass: 'cropper_dialog',
      data: { inputRatio: 10 / 7.5, inputWidth: 400, type: 'REWARD' }
    });
    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.cropFile = result;
        this.f.image.setErrors(null);
        this.f.image.markAsDirty();
      }
    });
  }

  onChangeCodeType(value: string) {
    if (this.rewardId && this.rewardDetails.isDisabled) {
      this.f.couponCodeType.setValue(this.rewardDetails.couponCodeType);
    } else {
      if (value == this.codeType[0].value) {
        this.f.totalRedemption.setErrors({ required: true });
        this.resetSelectedFile();
      } else {
        this.f.totalRedemption.setErrors(null);
      }
      this.f.totalRedemption.setValue('');
      this.f.totalRedemption.updateValueAndValidity();
    }
  }

  typeSelectionHandler(typeValue: String) {
    if (this.rewardId && this.rewardDetails.isDisabled) {
      this.f.type.setValue(this.rewardDetails.type);
    } else {
      this.setDefaultCouponType();
    }
  }

  onChangePrivacy() {
    if (this.rewardId && this.rewardDetails.isDisabled) {
      this.f.privacy.setValue(this.rewardDetails.privacy);
    } else {
      this.setDefaultCouponType();
    }
  }

  setDefaultCouponType() {
    if (this.f.privacy.value == this.rewardPricay[1].value) {
      this.f.type.setValue(this.rewardType[1].value);
    }
  }

  calculateRewardPoints() {
    if (this.f.totalPoints.value && this.f.discountPercent.valid) {
      let rewardPoint = Math.ceil((Number(this.f.totalPoints.value) * (100 - Number(this.f.discountPercent.value))) / 100);
      this.f.points.setValue(rewardPoint);
    } else {
      this.f.points.setValue(Number(this.f.totalPoints.value));
    }
  }

  onChangeScanner() {
    if (this.rewardId && this.rewardDetails.isDisabled) {
      this.f.hasScanner.setValue(this.rewardDetails.hasScanner);
    }
  }

  async rewardHandler() {
    this.checkValidation();
    console.log(this.rewardForm.value);
    if (this.rewardForm.valid) {
      let formValue = this.rewardForm.value;

      if (formValue.discountPercent) {
        formValue.discountPercent = Number(formValue.discountPercent);
      } else {
        delete formValue.discountPercent;
      }

      if (this.f.hasExternalLink.value) {

        this.rewardForm.value['couponCodes'] = [];

      } else {

        if (this.f.couponCodeType.value == this.codeType[1].value && !this.codesArray.manuallyGeneratedCodes.length) {
          this._toast.error(this.errMsg.MIN_MANUAL_CODE);
          return;
        }

        if (this.f.couponCodeType.value == this.codeType[0].value) {
          this.rewardForm.value['couponCodes'] = this.codesArray.autoGeneratedCodes;
        } else {
          this.rewardForm.value['couponCodes'] = this.codesArray.manuallyGeneratedCodes;
        }

        if (this.f.couponCodeType.value == this.codeType[1].value) {
          formValue.totalRedemption = this.codesArray.manuallyGeneratedCodes.length;
        } else {
          formValue.totalRedemption = Number(formValue.totalRedemption);
        }
      }

      formValue.totalPoints = Number(formValue.totalPoints);
      formValue.points = Number(formValue.points);
      formValue.redemptionValidity = Number(formValue.redemptionValidity);
      formValue.validity = dateToMs(formValue.validity, true);

      delete formValue['couponCode'];

      if (this.cropFile && this.f.image.dirty) {
        await this.uploadImage(formValue);
      }

      if (this.rewardId) {
        if (this.rewardForm.dirty) {
          this.updateReward(formValue);
        } else {
          this.navigate();
        }
      } else {
        this.addNewReward(formValue);
      }
    } else {
      this._toast.error("Plesae fill all fields");
    }
  }

  uploadImage(formValue) {
    return new Promise((resolve, reject) => {
      this._s3.uploadFile(this.cropFile.cropFile).then((response: any) => {
        if (response && response.Location) {
          formValue.image = response.Location;
          resolve(true);
        }
      }, (error) => {
        reject(error);
      })
    })
  }

  addNewReward(formBody: any) {
    this._reward.addReward(formBody).subscribe(res => {
      if (res.statusCode === 201) {
        this.navigate(res.message);
      }
    })
  }

  updateReward(formBody: any) {
    formBody['rewardId'] = this.rewardId;
    this._reward.updateReward(formBody).subscribe(res => {
      if (res.statusCode === 202) {
        this.navigate(res.message);
      }
    })
  }

  checkValidation() {

    this.calculateRewardPoints();
    this.trimValues();

    if (!this.f.validity.value) {
      this.f.validity.setErrors({ required: true });
    }

    if (!this.f.hasExternalLink.value) {
      if (this.f.couponCodeType.value == this.codeType[0].value && !this.f.totalRedemption.value) {
        this.f.totalRedemption.setErrors({ required: true });
      } else {
        this.f.totalRedemption.setErrors(null);
      }
    }

    if (!this.cropFile) {
      this.f.image.setErrors({ 'image': true });
      return
    }

    if (!this.f.validity.valid) {
      this.f.validity.setErrors({ 'invalid': true });
      return
    }

  }

  trimValues() {
    for (const key in this.rewardForm.value) {
      if (this.rewardForm.value.hasOwnProperty(key) && typeof this.f[key].value == "string") {
        this.f[key].setValue(this.f[key].value.trim());
      }
    }
  }

  cancelHandler() {
    this._loc.back();
  }

  navigate(mssg?: string) {
    if (mssg) {
      this._toast.success(mssg);
    }
    this._router.navigate([REWARDS]);
  }

}
